{"version":3,"sources":["components/user-pages/Signup.js","components/user-pages/Login.js","components/Home.js","components/content-pages/AddShow.js","components/content-pages/ShowList.js","components/content-pages/AddSong.js","components/content-pages/SongList.js","components/content-pages/AddImage.js","components/content-pages/Gallery.js","components/content-pages/EditShow.js","components/content-pages/ShowDetails.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Signup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fullName","email","originalPassword","message","event","_event$target","target","name","value","setState","defineProperty","_this2","preventDefault","axios","post","process","withCredentials","then","response","userDoc","data","onUserChange","catch","err","console","error","_this3","currentUser","react_default","a","createElement","onSubmit","handleSubmit","onChange","genericSync","type","placeholder","Component","Login","log","className","Home","AddShow","date","location","price","isSubmitSuccessful","index","specs","alert","react_router","to","ShowList","showsArray","get","map","oneShow","key","_id","react_router_dom","concat","AddSong","title","author","lyrics","SongList","songsArray","oneSong","AddImage","image","description","files","uploadData","FormData","append","fileUrl","_this4","e","uploadImage","width","src","alt","Gallery","galleryArray","responseFromAPI","oneImage","EditShow","theShow","_this$props$theShow","redirect","put","_this$state","ShowDetails","showEdit","params","match","showId","responseFromApi","id","delete","history","push","content_pages_EditShow","NotFound","App","syncCurrentUser","user","onClick","logoutClick","exact","path","component","render","user_pages_Signup","user_pages_Login","content_pages_AddShow","content_pages_AddSong","content_pages_AddImage","Boolean","window","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9177b704.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from \"axios\";\n\n\nclass Signup extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            // these are req.body.name of each input field in the form\n            fullName: \"\",\n            email: \"\",\n            originalPassword:\"\",\n            message: null,\n        }\n    }\n// 🎯 you can reuse this for every React form\ngenericSync(event){\n    const { name, value } = event.target;\n    this.setState({ [name]:value });\n}\n\nhandleSubmit(event){\n    event.preventDefault();\n\n    axios.post(\n        process.env.REACT_APP_SERVER_URL + \"/api/signup\",\n        this.state,\n        { withCredentials: true } // FORCE axios to send cookies across domains\n      )\n        .then(response => {\n          // console.log(\"Signup Page\", response.data);\n          const { userDoc } = response.data;\n          // send \"userDoc\" to the App.js function that changes \"currentUser\"\n          this.props.onUserChange(userDoc);\n        })\n        .catch(err => {\n          if (err.response && err.response.data) {\n            console.error(\"API response\", err.response.data)\n             this.setState({ message: err.response.data}) \n          }\n        });\n    }\n\n\n\nrender(){\n    if(this.props.currentUser){\n        return(\n            <section>\n                <h2> You are signed up! </h2>\n                <p> Welcome, { this.props.currentUser.fullName }! \n                    Your email is: <b> { this.props.currentUser.email } </b>\n                </p>\n            </section>\n        )\n    }\n\n    return (\n         <section>\n            <h2> Sign Up </h2>\n            \n            <form onSubmit={ event => this.handleSubmit(event) } >\n                <label> Full Name </label>\n                <input\n                    value = { this.state.fullName }\n                    onChange={ event => this.genericSync(event) }\n                    type=\"text\"\n                    name=\"fullName\"\n                    placeholder=\"Tony Stark\"\n                />\n               <label> Email </label>\n                <input\n                    value = { this.state.email }\n                    onChange={ event => this.genericSync(event) }\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"womanhouse@gmail.com\"\n                />\n               <label> Password </label>\n                <input\n                    value = { this.state.originalPassword }\n                    onChange={ event => this.genericSync(event) }\n                    type=\"password\"\n                    name=\"originalPassword\"\n                    placeholder=\"*******\"\n                />\n                <button> Sign Up </button>\n            </form>\n            {/* if the message is not NULL then show the message */}\n            { this.state.message && <div> { this.state.message } </div> }\n        </section>\n    )\n  }\n}\n\nexport default Signup;","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n          email: \"\",\n          originalPassword: \"\",\n          message: null,\n        };\n    }\n\n    genericSync(event) {\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    \n        axios.post(\n          process.env.REACT_APP_SERVER_URL + \"/api/login\",\n          this.state,\n          { withCredentials: true } // FORCE axios to send cookies across domains\n        )\n          .then(response => {\n            console.log(\"Login Page\", response.data);\n            const { userDoc } = response.data;\n            // send \"userDoc\" to the App.js function that changes \"currentUser\"\n            this.props.onUserChange(userDoc);\n          })\n          .catch(err => {\n            if (err.response && err.response.data) {\n              // console.error(\"API response\", err.response.data)\n              return  this.setState({ message: err.response.data.message }) \n            }\n        });\n      }\n\n\n    render(){\n        return(\n            <section className=\"LoginPage\">\n                <h2>Log In</h2>\n\n                <form onSubmit={event => this.handleSubmit(event)}>\n                    <label> Email:  </label>\n                    <input \n                        value={this.state.email}\n                        onChange={event => this.genericSync(event)}\n                        type=\"email\" \n                        name=\"email\" \n                        placeholder=\"womanhouse@gmail.com\" \n                    />\n         \n\n                    <label> Password: </label>\n                    <input \n                        value={this.state.originalPassword}\n                        onChange={event => this.genericSync(event)}\n                        type=\"password\" \n                        name=\"originalPassword\" \n                        placeholder=\"****\"\n                    />\n                    <button>Log In</button>\n                </form>\n                { this.state.message && <div> { this.state.message } </div> }\n            </section>\n        );\n    }\n}\n\nexport default Login;","import React, { Component } from \"react\";\n\nclass Home extends Component {\n  render(){\n    return (\n      <section className=\"HomePage\">\n       <h2>Home Page</h2>\n        <p>something goes here</p>\n      </section>\n    )\n  }\n  }\n\n\nexport default Home;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\n\nclass AddShow extends Component {\n       constructor(props){\n           super(props);\n           this.state = {\n               name: \"\",\n               date: \"\",\n               location: \"\",\n               price: \"\",\n               isSubmitSuccessful: false,\n           };\n       } \n\n       // for all fields \n       genericSync(event) {\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    }\n\n    // upload specs\n    syncSpecs(event, index) {\n        const { specs } = this.state;\n        // update the spec value at the given index\n        specs[index] = event.target.value;\n        // set the state with the updated specs array\n        this.setState({ specs });\n    }\n\n    handleSubmit(event) {\n        // stop the page refresh\n        event.preventDefault();\n    \n        // PUT and POST requests receive a 2nd argument: the info to submit\n        // (we are submitting the state we've gathered from the form)\n        axios.post(\n          process.env.REACT_APP_SERVER_URL + \"/api/shows\",\n          this.state,\n          { withCredentials: true } // FORCE axios to send cookies across domains\n        )\n          .then(response => {\n            console.log(\"Add show\", response.data);\n            this.setState({ isSubmitSuccessful: true });\n          })\n          .catch(err => {\n            console.log(\"Add show ERROR\", err);\n            alert(\"Sorry! Something went wrong.\");\n          });\n      }\n\n\n\n    render(){\n        if(!this.props.currentUser){\n            return <Redirect to=\"/login-page\" />;\n        }\n\n        if (this.state.isSubmitSuccessful) {\n            // redirect back to the show list page if the form submission worked\n            return <Redirect to=\"/show-list\" />;\n        }\n        \n        return (\n            <section>\n                <h2>Add a Show</h2>\n\n                <form onSubmit={event => this.handleSubmit(event)}>\n                    <label> Name: </label>\n                    <input \n                        value={this.state.name}\n                        onChange={event => this.genericSync(event)}\n                        type=\"text\" \n                        name=\"name\" \n                        placeholder=\"name of show\" \n                    />\n\n                    <label> Date: </label>\n                    <input \n                        value={this.state.date}\n                        onChange={event => this.genericSync(event)}\n                        type=\"text\" \n                        name=\"date\" \n                        placeholder=\"date of show\" \n                    />\n\n                    <label> Location: </label>\n                    <input \n                        value={this.state.location}\n                        onChange={event => this.genericSync(event)}\n                        type=\"text\" \n                        name=\"location\" \n                        placeholder=\"location of the show\" \n                    />\n\n                    <label> Price: </label>\n                    <input \n                        value={this.state.price}\n                        onChange={event => this.genericSync(event)}\n                        type=\"text\" \n                        name=\"price\" \n                        placeholder=\"price of the tickets\" \n                    />\n                    \n                    <button> Save </button>\n                    \n                </form>\n            </section>\n        )\n    }\n\n\n\n}\n\nexport default AddShow;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\n\n\n\nclass ShowList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            // the array stays empty until the response from server doesn't fill it\n            showsArray: [],\n        };\n    }\n\n // React will call \"componentDidMount()\" automatically when ShowList loads\n componentDidMount() {\n  // retrieve the info from the API as soon as the component loads\n  axios.get(\n  process.env.REACT_APP_SERVER_URL + \"/api/shows\",\n  { withCredentials: true } // FORCE axios to send cookies across domains\n  )\n  .then(response => {\n    //   console.log(\"Show List\", response.data);\n      // update our state array with the data from the API\n      this.setState({ showsArray: response.data });\n  })\n  .catch(err => {\n      console.log(\"Show List ERROR\", err);\n      alert(\"Sorry! Something went wrong.\");\n  });\n}\n\n    render(){\n        // console.log('array of shows: ', this.state.showsArray);\n        const { showsArray } = this.state;\n        return (\n            <section>\n              <h1> Shows </h1>\n              {showsArray.map(oneShow => {\n                return (\n                  <li key={ oneShow._id }>\n                            { oneShow.name } at { oneShow.location }\n                            <p> { oneShow.price } </p>\n                    <Link to ={`show-details/${oneShow._id}`}>edit this show here </Link>\n                        </li>\n                )\n              })}\n            </section>\n        )\n    }\n}\n\nexport default ShowList;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\n\nclass AddSong extends Component { \n    constructor(props) {\n        super(props);\n    \n        this.state = {\n          title: \"\",\n          author: \"\",\n          lyrics: \"\",\n          // each empty string in \"specs\" will display an <input> tag\n          isSubmitSuccessful: false,\n        };\n\n        console.log(this.props)\n    }\n\n    // for all fields except images and specs\n    genericSync(event) {\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    }\n\n    // upload specs\n    syncSpecs(event, index) {\n        const { specs } = this.state;\n        // update the spec value at the given index\n        specs[index] = event.target.value;\n        // set the state with the updated specs array\n        this.setState({ specs });\n    }\n\n    handleSubmit(event) {\n        // stop the page refresh\n        event.preventDefault();\n    \n        // PUT and POST requests receive a 2nd argument: the info to submit\n        // (we are submitting the state we've gathered from the form)\n        axios.post(\n          process.env.REACT_APP_SERVER_URL + \"/api/songs\",\n          this.state,\n          { withCredentials: true } // FORCE axios to send cookies across domains\n        )\n          .then(response => {\n            console.log(\"Add song\", response.data);\n            this.setState({ isSubmitSuccessful: true });\n          })\n          .catch(err => {\n            console.log(\"Add song ERROR\", err);\n            alert(\"Sorry! Something went wrong.\");\n          });\n      }\n\n    render(){\n        if(!this.props.currentUser){\n            return <Redirect to=\"/login-page\" />;\n        }\n\n        if (this.state.isSubmitSuccessful) {\n            // redirect back to the song list page if the form submission worked\n            return <Redirect to=\"/song-list\" />;\n        }\n\n        return (\n            <section>\n                <h2>Add a Song</h2>\n\n                <form onSubmit={event => this.handleSubmit(event)}>\n                    <label> Title: </label>\n                    <input \n                        value={this.state.title}\n                        onChange={event => this.genericSync(event)}\n                        type=\"text\" \n                        name=\"title\" \n                        placeholder=\"name of song\" \n                    />\n\n                    <label> Author: </label>\n                    <input \n                        value={this.state.author}\n                        onChange={event => this.genericSync(event)}\n                        type=\"text\" \n                        name=\"author\" \n                        placeholder=\"name of author\" \n                    />\n\n                    <label> Lyrics: </label>\n                    <input \n                        value={this.state.lyrics}\n                        onChange={event => this.genericSync(event)}\n                        type=\"text\" \n                        name=\"lyrics\" \n                        placeholder=\"lyrics of song\" \n                    />\n                    \n                    <button> Save </button>\n                    \n                </form>\n            </section>\n        )\n    }\n}\n\nexport default AddSong;","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\n\n\nclass SongList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            // the array stays empty until the response from server doesn't fill it\n            songsArray: [],\n        };\n    }\n\n  \n   // React will call \"componentDidMount()\" automatically when ShowList loads\n   componentDidMount() {\n    // retrieve the info from the API as soon as the component loads\n    axios.get(\n    process.env.REACT_APP_SERVER_URL + \"/api/songs\",\n    { withCredentials: true } // FORCE axios to send cookies across domains\n    )\n    .then(response => {\n        console.log(\"Song List\", response.data);\n        // update our state array with the data from the API\n        this.setState({ songsArray: response.data });\n    })\n    .catch(err => {\n        console.log(\"Song List ERROR\", err);\n        alert(\"Sorry! Something went wrong.\");\n    });\n}\n\n\n    render(){\n        // console.log('array of songs: ', this.state.songsArray);\n        const { songsArray } = this.state;\n        return (\n            <section>\n              <h1> Songs </h1>\n              {songsArray.map(oneSong => {\n                return (\n                  <li key={ oneSong._id }>\n                            { oneSong.title } lyrics written by { oneSong.author }\n                            <p> { oneSong.lyrics } </p>\n              \n                        </li>\n                )\n              })}\n            </section>\n        )\n    }\n}\n\nexport default SongList;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\n\nclass AddImage extends Component {\n    constructor(props){\n    super(props);\n    this.state = {\n        image: \"\",\n        description: \"\",\n        isSubmitSuccessful: false,\n    };\n  } \n  \n    // UPLOAD IMAGE\n\n    uploadImage(event) {\n      const { files } = event.target;\n      // console.log(\"File SELECTED\", files[0]);\n  \n      // the \"FormData\" class will format the files for sending to our API\n      const uploadData = new FormData();\n      // the name \"fileSubmission\" is the one your backend route defined.\n      uploadData.append(\"fileSubmission\", files[0]);\n  \n      axios.post(\n        process.env.REACT_APP_SERVER_URL + \"/api/upload-file\",\n        uploadData,\n        { withCredentials: true }\n      )\n      .then(response => {\n      //   console.log(\"Upload Image\", response.data);\n        this.setState({ image: response.data.fileUrl });\n      })\n      .catch(err => {\n        console.log(\"Upload Image ERROR\", err);\n        alert(\"Sorry! Something went wrong.\");\n      });\n    }\n\n  // for all fields \n  genericSync(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n}\n\n    syncSpec(event, index){\n      const { specs } = this.state;\n      // update the spec with whatever user typed in \n      // which means replace empty string with the value user typed in, on index 0, then 1, then 2, ...\n      specs[index] = event.target.value;\n      // update the state with the updated specs array\n      this.setState({ specs });\n    }\n\n    handleSubmit(event) {\n      // stop the page refresh\n      event.preventDefault();\n  \n      // PUT and POST requests receive a 2nd argument: the info to submit\n      // (we are submitting the state we've gathered from the form)\n      axios.post(\n        process.env.REACT_APP_SERVER_URL + \"/api/gallery\",\n        this.state,\n        { withCredentials: true } // FORCE axios to send cookies across domains\n      )\n        .then(response => {\n          // console.log(\"Add Image\", response.data);\n          this.setState({ isSubmitSuccessful: true });\n        })\n        .catch(err => {\n          console.log(\"Add image ERROR\", err);\n          alert(\"Sorry! Something went wrong.\");\n        });\n    }\n\n\n\n    render(){\n      if(!this.props.currentUser){\n          return <Redirect to=\"/login-page\" />\n      }\n\n     if(this.state.isSubmitSuccessful){\n         return <Redirect to=\"/gallery\" />\n     }\n     return(\n         <section>\n             <h2> Add an image </h2>\n             <form onSubmit={ e => this.handleSubmit(e) } >\n                  <input \n                      onChange={ e => this.uploadImage(e) }\n                      type= \"file\"\n                  />\n                  <br />\n                  <img width=\"200\"  src={ this.state.image } alt=\"\"/>\n                  <input \n                     value = { this.state.description }\n                     onChange={ e => this.genericSync(e) }\n                     type = \"text\"\n                     name = \"description\"\n                     placeholder = \"description of image\"\n                  \n                  />\n                  <button> Save </button>\n\n             </form>\n         </section>\n     )\n  }\n}\n\nexport default AddImage;","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\n\nclass Gallery extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            // the array stays empty until the response from server doesn't fill it\n            galleryArray: [],\n        };\n    }\n\n    componentDidMount(){\n        axios.get(\n          process.env.REACT_APP_SERVER_URL + \"/api/gallery\",\n            { withCredentials: true }\n        )\n        .then( responseFromAPI => this.setState({ galleryArray: responseFromAPI.data }) )\n        .catch( err => console.log(err) );\n    }\n\n    render(){\n        // console.log('array of images: ', this.state.galleryArray);\n        const { galleryArray } = this.state;\n        return (\n            <section>\n              <h1> Gallery </h1>\n              {galleryArray.map(oneImage => {\n                return (\n                  <li key={ oneImage._id }>\n                            { oneImage.image }\n                            {/* <p> { oneImage.description } </p> */}\n                            <img  width=\"100\" src={ oneImage.image } alt={ oneImage.description }/>\n                        </li>\n                )\n              })}\n            </section>\n        )\n    }\n}\n\nexport default Gallery;","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport { Redirect } from 'react-router-dom';\n\nclass EditShow extends Component {\n    constructor(props){\n        super(props);\n        // console.log(props)\n        console.log(this.props.theShow, \"the props.show\")\n        const { _id, name, date, location, price } = this.props.theShow;\n        // console.log(_id, \" id in the constructor\")\n        \n        this.state = {\n            _id,\n            name,\n            date,\n            location,\n            price,\n            redirect: false\n        };\n    }\n\n\n     // for all fields except images and specs\n     genericSync(event) {\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    }\n\n    syncSpecs(event, index) {\n        const { specs } = this.state;\n        // update the spec value at the given index\n        specs[index] = event.target.value;\n        // set the state with the updated specs array\n        this.setState({ specs });\n    }\n\n    handleSubmit(event) {\n        console.log(this.state);\n        // stop the page from refreshing\n        event.preventDefault();\n        // PUT and POST requests receive a 2nd argument: the info to submit\n        // (we are submitting the state we've gathered from the form)\n        axios.put(\n          process.env.REACT_APP_SERVER_URL + `/api/shows/${this.props.theShow._id}`,\n          this.state,\n          { withCredentials: true } // FORCE axios to send cookies across domains\n        )\n          .then(response => {\n            this.setState({redirect: true}); \n          })\n          .catch(err => {\n            console.log(\"Update Show ERROR\", err);\n            alert(\"Sorry! Something went wrong.\");\n          });\n      }\n\n    render(){\n        const { name, date, location, price } = this.state;\n        console.log(this.state, \"this is edit show component\");\n        if(this.state.redirect){\n            return <Redirect to=\"/show-list\"/>;\n        } else {\n            return (\n            <section>\n                <h2>Edit { name }  </h2>\n\n                <form onSubmit={event => this.handleSubmit(event)}>\n                    <label> Name: </label>\n                    <input \n                        value={ name }\n                        onChange={event => this.genericSync(event)}\n                        type=\"text\" \n                        name=\"name\" \n                    />\n\n                    <label> Date: </label>\n                    <input \n                        value={ date }\n                        onChange={event => this.genericSync(event)}\n                        type=\"text\" \n                        name=\"date\" \n                    />\n\n                    <label> Location: </label>\n                    <input \n                        value={ location }\n                        onChange={event => this.genericSync(event)}\n                        type=\"text\" \n                        name=\"location\" \n                    />\n\n                    <label> Price: </label>\n                    <input \n                        value={ price }\n                        onChange={event => this.genericSync(event)}\n                        type=\"text\" \n                        name=\"price\" \n                    />\n                    <button> Save </button>\n                </form>\n            </section>\n        )\n        }\n        \n    }\n}\n\nexport default EditShow;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport EditShow from './EditShow';\n\nclass ShowDetails extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            showEdit: false,\n        };\n    }\n\n    // React will call \"componentDidMount()\" automatically when ShowDetails loads\n    componentDidMount(){\n        const { params } = this.props.match;\n\n        axios.get(process.env.REACT_APP_SERVER_URL + `/api/shows/${params.showId}`)\n        .then(responseFromApi => {\n            console.log(responseFromApi.data);\n            this.setState(responseFromApi.data);\n        })\n        .catch(err => console.log(err));\n    }\n\n    showEditForm(){\n        this.setState({ showEdit: true });   \n    }\n\n    deleteShow(id){\n        axios.delete(process.env.REACT_APP_SERVER_URL + `/api/shows/${id}`)\n        .then(responseFromApi => {\n            this.props.history.push('/show-list'); \n        })\n        .catch(err => console.log(err));\n    }\n\n    render(){\n        console.log('ShowDetails', this.state);\n        return (\n            <section>\n\n                <EditShow theShow = {this.state}/>\n              \n                <Link to={\"/show-list\"}>Go to shows page </Link>\n                \n            </section>\n        )\n    }\n}\n\nexport default ShowDetails;","import React, { Component } from \"react\";\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <section className=\"NotFound\">\n        <h2>404 Not Found</h2>\n\n        <p>Sorry, the page you are looking for doesn't exist.</p>\n       \n      </section>\n    );\n  }\n}\n\nexport default NotFound;","import React, { Component } from 'react';\nimport './App.css';\nimport { Switch, NavLink, Route } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Signup from './components/user-pages/Signup';\nimport Login from './components/user-pages/Login';\nimport Home from './components/Home';\nimport AddShow from './components/content-pages/AddShow';\nimport ShowList from './components/content-pages/ShowList';\nimport AddSong from './components/content-pages/AddSong';\nimport SongList from './components/content-pages/SongList';\nimport AddImage from './components/content-pages/AddImage';\nimport Gallery from './components/content-pages/Gallery';\nimport ShowDetails from './components/content-pages/ShowDetails';\nimport NotFound from \"./components/NotFound.js\";\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      currentUser: null,\n    }\n  }\n\n  componentDidMount() {\n    // React doesn't know at the start if we are logged-in or not\n    // (but we can ask the server if we are through an API request)\n    axios.get(\n      process.env.REACT_APP_SERVER_URL + \"/api/checkuser\",\n      { withCredentials: true } // FORCE axios to send cookies across domains\n    )\n    .then(response => {\n      // console.log(\"Check User\", response.data);\n      const { userDoc } = response.data;\n      this.syncCurrentUser(userDoc);\n    })\n    .catch(err => {\n      console.log(\"Check User ERROR\", err);\n      alert(\"Sorry! Something went wrong.\");\n    });\n  }\n\n  // this is the method for updating \"currentUser\"\n  // (must be defined in App.js since it's the owner of \"currentUser\" now)\n  syncCurrentUser(user){\n    this.setState({ currentUser: user });\n  }\n\n logoutClick() {\n    axios.delete(\n      process.env.REACT_APP_SERVER_URL + \"/api/logout\",\n      { withCredentials: true } // FORCE axios to send cookies across domains\n    )\n    .then(() => {\n      // make \"currentUser\" empty again (like it was at the start)\n      this.syncCurrentUser(null);\n    })\n    .catch(err => {\n      console.log(\"Logout ERROR\", err);\n      alert(\"Sorry! Something went wrong.\");\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n         <h1> womanhouse </h1>\n         <nav>\n           \n          { this.state.currentUser ? (\n            <span>\n          {/* Home will be always visible to everyone */}\n              <NavLink to=\"/\"> Home </NavLink>\n              <NavLink to=\"/add-show\"> Add a Show</NavLink>\n              <NavLink to=\"/add-song\"> Add a Song</NavLink>\n              <NavLink to=\"/add-image\"> Add to Gallery</NavLink>\n              <NavLink to=\"/show-list\"> Update Show List</NavLink>\n              <br />\n              <br />\n              <b> { this.state.currentUser.email } </b>\n\n             <button onClick={() => this.logoutClick()}>\n                 Log Out\n                </button>\n\n            </span>\n          ) : (\n            // these pages will be visible only if there is no user in the session // WILL HIDE LATER <------- !!!!!!!!!!!\n            <span>\n              <NavLink to=\"/show-list\"> Shows </NavLink>\n              <NavLink to=\"/song-list\"> Songs </NavLink>\n              <NavLink to=\"/gallery\"> Gallery </NavLink>\n              {/* <NavLink to=\"/signup-page\"> Signup </NavLink> */}\n              <NavLink to=\"/login-page\"> Login </NavLink>\n            </span>\n          ) }\n          \n         </nav>\n        </header>\n\n        <Switch>\n          {/* this is example how to normally do the Route: */}\n          {/* <Route path=\"/somePage\" component={ someComponentThatWillRenderWhenUSerClickThisLink }   /> */}\n        <Route exact path=\"/\" component={ Home } />\n\n\n         {/* this way we use when we are passing params down to componentDidMount() {\n           so we can't use component={}, but instead we have to use render ={() => <someComponent/>}\n         } */}\n         \n          <Route path=\"/signup-page\" render={ () => \n            <Signup currentUser={this.state.currentUser} \n            onUserChange={ userDoc => this.syncCurrentUser(userDoc) }   />\n          }  />\n\n          \n          <Route path=\"/login-page\" render={ () => \n            <Login currentUser={ this.state.currentUser } \n            onUserChange={userDoc => this.syncCurrentUser(userDoc)} /> }  />\n\n          <Route path=\"/add-show\" render={ () => <AddShow currentUser={ this.state.currentUser }  /> }/>\n          <Route path=\"/show-list\" component={ ShowList }/>\n          <Route path=\"/show-details/:showId\" component={ShowDetails} />\n\n\n          <Route path=\"/add-song\" render={ () => <AddSong currentUser={ this.state.currentUser }  /> }/>\n          <Route path=\"/song-list\" component={ SongList }/>\n\n          <Route path=\"/add-image\" render={ () => <AddImage currentUser={ this.state.currentUser }  /> }/>\n          <Route path=\"/gallery\" component={ Gallery }/>\n\n\n          {/* 404 route ALWAYS LAST */}\n          <Route component={NotFound} />   \n\n        </Switch>\n\n        <footer>\n          \n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter>\n<App/>\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}